import math
import cmath
from conversiones import estrella_a_triangulo, triangulo_a_estrella
from calculos import mostrar, mostrar_potencia, calcular_tensiones_corrientes_potencias

def leer_impedancia(nombre, formato):
    if formato == 1: # Rectangular
        r = float(input(f"Parte real de {nombre}: "))
        i = float(input(f"Parte imaginaria de {nombre}: "))
        return complex(r, i)
    else: # Polar
        mag = float(input(f"Magnitud de {nombre}: "))
        ang = float(input(f"Ángulo (grados) de {nombre}: "))
        rad = math.radians(ang)
        return cmath.rect(mag, rad)

def main():
    print("Seleccione una opción:")
    print("1) Estrella a Triángulo")
    print("2) Triángulo a Estrella")
    print("3) Calcular tensiones, corrientes y potencias (incluye lectura de varímetro)")
    print("4) Ejercicio combinado (conversión + cálculos + reconversión)")
    op = int(input("> "))
    if op in [3, 4]:
        print("\n¿El circuito es balanceado?")
        print("1) Sí")
        print("2) No")
        balanceado = int(input("> "))
    if op == 1:
        print("\nFormato de entrada:")
        print("1) Rectangular (real, imag)")
        print("2) Polar (magnitud, ángulo en grados)")
        formato = int(input("> "))
        Za = leer_impedancia("Za", formato)
        Zb = leer_impedancia("Zb", formato)
        Zc = leer_impedancia("Zc", formato)
        Z1, Z2, Z3 = estrella_a_triangulo(Za, Zb, Zc)
        print("\nResultados:")
        mostrar("Z1", Z1)
        mostrar("Z2", Z2)
        mostrar("Z3", Z3)
    elif op == 2:
        print("\nFormato de entrada:")
        print("1) Rectangular (real, imag)")
        print("2) Polar (magnitud, ángulo en grados)")
        formato = int(input("> "))
        Z1 = leer_impedancia("Z1", formato)
        Z2 = leer_impedancia("Z2", formato)
        Z3 = leer_impedancia("Z3", formato)
        Za, Zb, Zc = triangulo_a_estrella(Z1, Z2, Z3)
        print("\nResultados:")
        mostrar("Za", Za)
        mostrar("Zb", Zb)
        mostrar("Zc", Zc)
    elif op == 3:
        print("\nTipo de conexión de la carga:")
        print("1) Estrella (Y)")
        print("2) Triángulo (Δ)")
        tipo = int(input("> "))
        print("\nFormato de entrada de impedancias:")
        print("1) Rectangular (real, imag)")
        print("2) Polar (magnitud, ángulo en grados)")
        formato = int(input("> "))
        if tipo == 1:
            print("\nIngrese las impedancias de fase (Za, Zb, Zc):")
            Za = leer_impedancia("Za", formato)
            Zb = leer_impedancia("Zb", formato)
            Zc = leer_impedancia("Zc", formato)
            Zs = [Za, Zb, Zc]
        else:
            print("\nIngrese las impedancias de fase (Z1, Z2, Z3):")
            Z1 = leer_impedancia("Z1", formato)
            Z2 = leer_impedancia("Z2", formato)
            Z3 = leer_impedancia("Z3", formato)
            Zs = [Z1, Z2, Z3]
        print("\nIngrese la tensión de línea (valor eficaz, en V):")
        Vlinea = float(input("> "))
        print("\nResultados:")
        calcular_tensiones_corrientes_potencias(Zs, Vlinea, tipo, balanceado)
    elif op == 4:
        print("\nEjercicio combinado:")
        print("1) Δ → Y → cálculos → Δ")
        print("2) Y → Δ → cálculos → Y")
        subop = int(input("> "))
        print("\nFormato de entrada de impedancias:")
        print("1) Rectangular (real, imag)")
        print("2) Polar (magnitud, ángulo en grados)")
        formato = int(input("> "))
        if subop == 1:
            print("\nIngrese las impedancias de triángulo (Z1, Z2, Z3):")
            Z1 = leer_impedancia("Z1", formato)
            Z2 = leer_impedancia("Z2", formato)
            Z3 = leer_impedancia("Z3", formato)
            Za, Zb, Zc = triangulo_a_estrella(Z1, Z2, Z3)
            print("\nConvertido a estrella:")
            mostrar("Za", Za)
            mostrar("Zb", Zb)
            mostrar("Zc", Zc)
            print("\nIngrese la tensión de línea (valor eficaz, en V):")
            Vlinea = float(input("> "))
            print("\nCálculos en estrella:")
            calcular_tensiones_corrientes_potencias([Za, Zb, Zc], Vlinea, 1)
            Z1n, Z2n, Z3n = estrella_a_triangulo(Za, Zb, Zc)
            print("\nReconversión a triángulo:")
            mostrar("Z1", Z1n)
            mostrar("Z2", Z2n)
            mostrar("Z3", Z3n)
        else:
            print("\nIngrese las impedancias de estrella (Za, Zb, Zc):")
            Za = leer_impedancia("Za", formato)
            Zb = leer_impedancia("Zb", formato)
            Zc = leer_impedancia("Zc", formato)
            Z1, Z2, Z3 = estrella_a_triangulo(Za, Zb, Zc)
            print("\nConvertido a triángulo:")
            mostrar("Z1", Z1)
            mostrar("Z2", Z2)
            mostrar("Z3", Z3)
            print("\nIngrese la tensión de línea (valor eficaz, en V):")
            Vlinea = float(input("> "))
            print("\nCálculos en triángulo:")
            calcular_tensiones_corrientes_potencias([Z1, Z2, Z3], Vlinea, 2)
            Zan, Zbn, Zcn = triangulo_a_estrella(Z1, Z2, Z3)
            print("\nReconversión a estrella:")
            mostrar("Za", Zan)
            mostrar("Zb", Zbn)
            mostrar("Zc", Zcn)

if __name__ == "__main__":
    main()
